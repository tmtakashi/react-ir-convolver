{"version":3,"sources":["Context.ts","components/WaveVisualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Context","React","createContext","ir","uri","setUri","source","WaveVisualizer","audioContext","mediaElement","type","context","useContext","overViewContainer","useRef","useEffect","isOverViewConstainer","Boolean","current","isMediaElement","options","containers","overview","webAudio","playheadColor","Peaks","init","err","peaks","console","error","message","OverViewContainer","styled","div","onChange","e","target","files","createObjectURL","window","URL","webkitURL","ref","controls","src","App","useState","process","irUri","setIrUri","sourceUri","setSourceUri","irElement","sourceElement","convolvedElement","audioCtx","AudioContext","convolver","createConvolver","getImpulseBuffer","irUrl","a","fetch","then","response","arrayBuffer","decodeAudioData","buffer","setConvolverBuffer","createMediaElementSource","connect","destination","Root","Container","Row","ConvolveSign","EqualSign","className","Provider","value","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dda405df.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface state {\n  ir: {\n    uri: string;\n    setUri: (uri: string) => void;\n  },\n  source: {\n    uri: string;\n    setUri: (uri: string) => void\n  },\n}\n\nexport const Context = React.createContext<state>({\n  ir: {\n    uri: '',\n    setUri: () => {},\n  },\n  source: {\n    uri: '',\n    setUri: () => {},\n  },\n});","import * as React from 'react';\nimport Peaks, { PeaksOptions } from 'peaks.js';\nimport { useEffect, useRef, useContext } from 'react';\nimport styled from 'styled-components';\nimport { Context } from '../Context';\n\ninterface Props {\n  audioContext: AudioContext;\n  mediaElement: React.RefObject<HTMLMediaElement>;\n  uri: string;\n  type: 'IR' | 'SOURCE' | 'CONVOLVED';\n}\n\nconst WaveVisualizer = ({audioContext, mediaElement, uri, type}: Props) => {\n  const context = useContext(Context);\n  const overViewContainer = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n      const isOverViewConstainer: boolean = Boolean(overViewContainer && overViewContainer.current);\n      const isMediaElement: boolean = Boolean(mediaElement && mediaElement.current);\n      if (isOverViewConstainer && isMediaElement) {\n        const options: PeaksOptions = {\n          containers: {\n            overview: overViewContainer.current,\n          },\n          mediaElement: mediaElement.current as Element,\n          webAudio: {\n            audioContext: audioContext,\n          },\n          playheadColor: '#333',\n        }\n        Peaks.init(options, (err, peaks) => {\n          if (err) {\n            console.error('failed: ', err.message);\n            return;\n          }\n\n        }) \n      }\n  }, [audioContext, mediaElement])\n\n  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      const createObjectURL = (window.URL || window.webkitURL).createObjectURL;\n      let uri\n      switch (type) {\n        case \"IR\":\n          uri = createObjectURL(e.target.files[0]);\n          context.ir.setUri(uri);\n          break;\n        case \"SOURCE\" || \"CONVOLVED\":\n          uri = createObjectURL(e.target.files[0]);\n          context.source.setUri(uri);\n          break;\n      \n        default:\n          break;\n      }\n    }\n  }\n\n  const OverViewContainer = styled.div`\n    border: 1px solid #777;\n  `;\n\n  return (\n      <div>\n        <input type=\"file\" onChange={onFileChange}></input>\n        <OverViewContainer ref={overViewContainer}/>\n        <audio controls ref={mediaElement}>\n          <source src={uri} type=\"audio/wav\"/>\n        </audio>\n      </div>\n  )\n}\n\nexport default WaveVisualizer;","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport WaveVisualizer from './components/WaveVisualizer';\nimport { Context } from './Context';\n\nfunction App() {\n  const [irUri, setIrUri] = useState(`${process.env.PUBLIC_URL}/60x45y.wav`);\n  const [sourceUri, setSourceUri] = useState(`${process.env.PUBLIC_URL}/modern-viola-c-major-bow-lift.wav`);\n\n  const irElement = useRef<HTMLMediaElement>(null);\n  const sourceElement = useRef<HTMLMediaElement>(null);\n  const convolvedElement = useRef<HTMLMediaElement>(null)\n\n  const audioCtx: AudioContext = new AudioContext();\n  const convolver: ConvolverNode = audioCtx.createConvolver();\n  \n  \n  const getImpulseBuffer = async function (audioCtx: AudioContext, irUrl: string) {\n    return fetch(irUrl)\n      .then(response => response.arrayBuffer())\n      .then(arrayBuffer => audioCtx.decodeAudioData(arrayBuffer));\n  };\n\n  useEffect(() => {\n    if (sourceElement && sourceElement.current && convolvedElement && convolvedElement.current) {\n      const setConvolverBuffer = async function () {\n        convolver.buffer = await getImpulseBuffer(audioCtx, irUri);\n      };\n      setConvolverBuffer();\n      const convolvedInput = audioCtx.createMediaElementSource(convolvedElement.current);\n      convolvedInput.connect(convolver).connect(audioCtx.destination);\n    }\n  }, [audioCtx, convolver, irUri])\n\n  const Root = styled.div`\n  `;\n\n  const Container = styled.div`\n    padding: 5% 10%;\n  `;\n\n  const Row = styled.div`\n    display: flex; \n    flex-direction: row; \n    justify-content: space-around; \n    align-items: center;  \n  `;\n\n  const ConvolveSign = styled.div`\n    display: inline-block;\n    font-size: 50px;\n    height: 200px;\n    line-height: 200px;\n  `;\n\n  const EqualSign = styled.div`\n    display: flex; \n    flex-direction: column; \n    justify-content: center;\n    align-items: center;  \n    transform: rotate(90deg);\n    font-size: 50px;\n    `;\n\n  return (\n    <div className=\"App\">\n      <Context.Provider value={{source: {uri: sourceUri, setUri: setSourceUri}, ir: {uri: irUri, setUri: setIrUri}}}>\n        <Root>\n          <Container>\n            <Row>\n              <WaveVisualizer audioContext={audioCtx} mediaElement={irElement} uri={irUri} type={'IR'}/> \n              <ConvolveSign>*</ConvolveSign>\n              <WaveVisualizer audioContext={audioCtx} mediaElement={sourceElement} uri={sourceUri} type={'SOURCE'}/> \n            </Row>\n            <EqualSign>=</EqualSign>\n            <WaveVisualizer audioContext={audioCtx} mediaElement={convolvedElement} uri={sourceUri} type={'CONVOLVED'}/> \n          </Container>\n        </Root>\n      </Context.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}